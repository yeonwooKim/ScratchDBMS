/* ScratchDBMSParser.java */
/* Generated By:JavaCC: Do not edit this line. ScratchDBMSParser.java */
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;

enum BufferName { DEFINITION, CONSTRAINT }

class Buffer {
    BufferName bn;
    ArrayList<String> arr;
    Attribute attr;

    public Buffer(BufferName bn, ArrayList<String> arr) {
        this.bn = bn;
        this.arr = arr;
    }

    public Buffer(BufferName bn, Attribute attr) {
        this.bn = bn;
        this.attr = attr;
    }

    public BufferName getBufferName() {
        return bn;
    }

    public ArrayList<String> getArr() {
        return arr;
    }

    public Attribute getAttr() {
        return attr;
    }
}

        public class ScratchDBMSParser implements ScratchDBMSParserConstants {
        public static void main(String args[]) throws ParseException
        {
            Runtime.getRuntime().addShutdownHook(new Thread() {
              public void run() {
                Berkeley.getBerkeley().close();
              }
            });
            Berkeley.getBerkeley().open();
                ScratchDBMSParser parser = new ScratchDBMSParser(System.in);
                MessagePrinter.printPrompt();

                while (true)
                {
                        try
                        {
                                parser.command();
                        }
                        catch (Exception e)
                        {
                                MessagePrinter.printMessage(Message.getSyntaxError());
                                ScratchDBMSParser.ReInit(System.in);
                        }
                }
        }

  static final public void command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CREATE:
    case DROP:
    case DESC:
    case SHOW:
    case SELECT:
    case INSERT:
    case DELETE:{
      queryList();
      break;
      }
    case EXIT:{
      jj_consume_token(EXIT);
      jj_consume_token(SEMICOLON);
System.exit(0);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void queryList() throws ParseException {Message m;
    label_1:
    while (true) {
      m = query();
      jj_consume_token(SEMICOLON);
MessagePrinter.printMessage(m);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CREATE:
      case DROP:
      case DESC:
      case SHOW:
      case SELECT:
      case INSERT:
      case DELETE:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  static final public Message query() throws ParseException {Message m;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CREATE:{
      m = createTableQuery();
if (m.getMessagename() == MessageName.CREATE_TABLE_SUCCESS)
                        Berkeley.getBerkeley().updateManager();
      break;
      }
    case DROP:{
      m = dropTableQuery();
if (m.getMessagename() == MessageName.DROP_SUCCESS)
                                Berkeley.getBerkeley().updateManager();
      break;
      }
    case DESC:{
      m = descQuery();
      break;
      }
    case SELECT:{
      selectQuery();
m = Message.getSelect();
      break;
      }
    case INSERT:{
      insertQuery();
m = Message.getInsert();
      break;
      }
    case DELETE:{
      deleteQuery();
m = Message.getDelete();
      break;
      }
    case SHOW:{
      m = showTablesQuery();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return m;}
    throw new Error("Missing return statement in function");
  }

/* create table statement */
  static final public Message createTableQuery() throws ParseException {Token tok;
        String tablename;
        Table t;
        Message m = null;
        Message m1 = null;
    jj_consume_token(CREATE);
    jj_consume_token(TABLE);
    tok = jj_consume_token(LEGAL_IDENT);
tablename = tok.toString();
                        t = DBManager.getDBManager().findTable(tablename);
                        if (t != null)
                            m = Message.getTableExistence();
                        t = new Table(tablename);
    m1 = tableElementList(t);
if (m != null)
                {if ("" != null) return m;}
            if (m1 != null)
                {if ("" != null) return m1;}
            DBManager.getDBManager().addTable(t);
            m = Message.getCreateTableSuccess();
            m.setNameArg(tablename);
            {if ("" != null) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public Message tableElementList(Table t) throws ParseException {Message m = null;
    Buffer b;
    ArrayList<Attribute> attrList = new ArrayList<Attribute>();
    ArrayList<ArrayList<String>> arrList = new ArrayList<ArrayList<String>>();
    jj_consume_token(LEFT_PAREN);
    b = tableElement(t);
if (b.getBufferName() == BufferName.DEFINITION)
                        attrList.add(b.getAttr());
                    else
                        arrList.add(b.getArr());
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      b = tableElement(t);
if (b.getBufferName() == BufferName.DEFINITION)
                        attrList.add(b.getAttr());
                    else
                        arrList.add(b.getArr());
    }
    jj_consume_token(RIGHT_PAREN);
Iterator<Attribute> it1 = attrList.iterator();
            while (it1.hasNext()) {
                Attribute attr = it1.next();
                if (!attr.getAttributeType().isValid()) {
                    {if ("" != null) return Message.getCharLength();}
                }
                m = t.addAttribute(attr);
                if (m != null)
                    {if ("" != null) return m;}
            }
            Iterator<ArrayList<String>> it2 = arrList.iterator();
            while (it2.hasNext()) {
                ArrayList<String> arr = it2.next();
                if (arr.get(0).equals("0")) { // primary key definition
                    arr.remove(0);
                    m = t.setPrimaryKey(arr);
                    if (m != null)
                        {if ("" != null) return m;}
                }
                else {
                    arr.remove(0);
                    String tablename = arr.get(0);
                    arr.remove(0);
                    int index = arr.indexOf("2");
                    List<String> aList = arr.subList(0, index);
                    List<String> bList = arr.subList(index + 1, arr.size());
                Table foreign_table = DBManager.getDBManager().findTable(tablename);
                if (foreign_table == null)
                    {if ("" != null) return Message.getReferenceTableExistence();}
                else
                    m = t.setForeignKey(new ArrayList(aList), foreign_table, new ArrayList(bList));
                    if (m != null)
                        {if ("" != null) return m;}
                }
            }
            {if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Buffer tableElement(Table t) throws ParseException {Attribute attr = null;
    ArrayList<String> arr = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEGAL_IDENT:{
      attr = columnDefinition(t);
      break;
      }
    case PRIMARY:
    case FOREIGN:{
      arr = tableConstraintDefinition(t);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (attr != null)
            {if ("" != null) return new Buffer(BufferName.DEFINITION, attr);}
        else
            {if ("" != null) return new Buffer(BufferName.CONSTRAINT, arr);}
    throw new Error("Missing return statement in function");
  }

  static final public Attribute columnDefinition(Table t) throws ParseException {Type typ;
        Token tok;
        String columnname;
        Attribute attr;
    tok = jj_consume_token(LEGAL_IDENT);
    typ = dataType();
columnname = tok.toString();
                        attr = new Attribute(typ, columnname);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      jj_consume_token(NULL);
attr.setNotNull();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
{if ("" != null) return attr;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<String> tableConstraintDefinition(Table t) throws ParseException {ArrayList<String> arr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRIMARY:{
      arr = primaryKeyConstraint(t);
      break;
      }
    case FOREIGN:{
      arr = referentialConstraint(t);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return arr;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<String> primaryKeyConstraint(Table t) throws ParseException {ArrayList<String> arr;
    jj_consume_token(PRIMARY);
    jj_consume_token(KEY);
    arr = columnNameList();
arr.add(0,"0");
            {if ("" != null) return arr;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<String> referentialConstraint(Table t) throws ParseException {ArrayList<String> arr1;
    ArrayList<String> arr2;
    Token tok;
    String tablename;
    jj_consume_token(FOREIGN);
    jj_consume_token(KEY);
    arr1 = columnNameList();
    jj_consume_token(REFERENCES);
    tok = jj_consume_token(LEGAL_IDENT);
    arr2 = columnNameList();
tablename = tok.toString();
                    arr1.add(0,"1");
                    arr1.add(1, tablename);
                    arr1.add("2");
                    arr1.addAll(arr2);
                    {if ("" != null) return arr1;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<String> columnNameList() throws ParseException {ArrayList<String> arr = new ArrayList<String>();
    Token tok;
    String s;
    jj_consume_token(LEFT_PAREN);
    tok = jj_consume_token(LEGAL_IDENT);
s = tok.toString();
                    arr.add(s);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      tok = jj_consume_token(LEGAL_IDENT);
s = tok.toString();
                    arr.add(s);
    }
    jj_consume_token(RIGHT_PAREN);
{if ("" != null) return arr;}
    throw new Error("Missing return statement in function");
  }

  static final public Type dataType() throws ParseException {Type t;
    Token tok;
    String intval;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
t = new Type(TypeName.INT, -1);
            {if ("" != null) return t;}
      break;
      }
    case CHAR:{
      jj_consume_token(CHAR);
      jj_consume_token(LEFT_PAREN);
      tok = jj_consume_token(INT_VALUE);
      jj_consume_token(RIGHT_PAREN);
intval = tok.toString();
                                    t = new Type(TypeName.CHAR, Integer.parseInt(intval));
                                    {if ("" != null) return t;}
      break;
      }
    case DATE:{
      jj_consume_token(DATE);
t = new Type(TypeName.DATE, -1);
                    {if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* drop table statement */
  static final public Message dropTableQuery() throws ParseException {Token tok;
        String tablename;
        Message m;
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    tok = jj_consume_token(LEGAL_IDENT);
tablename = tok.toString();
                        m = DBManager.getDBManager().dropTable(tablename);
                        {if ("" != null) return m;}
    throw new Error("Missing return statement in function");
  }

/* desc statement */
  static final public Message descQuery() throws ParseException {Token tok;
        String tablename;
        Message m;
    jj_consume_token(DESC);
    tok = jj_consume_token(LEGAL_IDENT);
tablename = tok.toString();
                    m = Message.getDescTable();
                    m.setNameArg(tablename);
                        {if ("" != null) return m;}
    throw new Error("Missing return statement in function");
  }

/* show tables statement */
  static final public Message showTablesQuery() throws ParseException {
    jj_consume_token(SHOW);
    jj_consume_token(TABLES);
{if ("" != null) return Message.getShowTables();}
    throw new Error("Missing return statement in function");
  }

/* select statement */
  static final public void selectQuery() throws ParseException {
    jj_consume_token(SELECT);
    selectList();
    tableExpression();
  }

  static final public void selectList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASTERISK:{
      jj_consume_token(ASTERISK);
      break;
      }
    case LEGAL_IDENT:{
      selectedColumn();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        selectedColumn();
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void selectedColumn() throws ParseException {
    tableColumn();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      jj_consume_token(LEGAL_IDENT);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void tableExpression() throws ParseException {
    fromClause();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      whereClause();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  static final public void fromClause() throws ParseException {
    jj_consume_token(FROM);
    tableReferenceList();
  }

  static final public void tableReferenceList() throws ParseException {
    referredTable();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      referredTable();
    }
  }

  static final public void referredTable() throws ParseException {
    jj_consume_token(LEGAL_IDENT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      jj_consume_token(LEGAL_IDENT);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void whereClause() throws ParseException {
    jj_consume_token(WHERE);
    booleanValueExpression();
  }

  static final public void booleanValueExpression() throws ParseException {
    booleanTerm();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(OR);
      booleanTerm();
    }
  }

  static final public void booleanTerm() throws ParseException {
    booleanFactor();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      jj_consume_token(AND);
      booleanFactor();
    }
  }

  static final public void booleanFactor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    booleanTest();
  }

  static final public void booleanTest() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEGAL_IDENT:
    case INT_VALUE:
    case DATE_VALUE:
    case CHAR_STRING:{
      predicate();
      break;
      }
    case LEFT_PAREN:{
      parenthesizedBooleanExpression();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void parenthesizedBooleanExpression() throws ParseException {
    jj_consume_token(LEFT_PAREN);
    booleanValueExpression();
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void predicate() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEGAL_IDENT:{
      identifierPredicate();
      break;
      }
    case INT_VALUE:
    case DATE_VALUE:
    case CHAR_STRING:{
      constantPredicate();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void identifierPredicate() throws ParseException {
    tableColumn();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMP_OP:{
      jj_consume_token(COMP_OP);
      compOperand();
      break;
      }
    case IS:{
      nullOperation();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void constantPredicate() throws ParseException {
    comparableValue();
    jj_consume_token(COMP_OP);
    compOperand();
  }

  static final public void compOperand() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_VALUE:
    case DATE_VALUE:
    case CHAR_STRING:{
      comparableValue();
      break;
      }
    case LEGAL_IDENT:{
      tableColumn();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void comparableValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_VALUE:{
      jj_consume_token(INT_VALUE);
      break;
      }
    case CHAR_STRING:{
      jj_consume_token(CHAR_STRING);
      break;
      }
    case DATE_VALUE:{
      jj_consume_token(DATE_VALUE);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void nullOperation() throws ParseException {
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(NULL);
  }

/* insert statement */
  static final public void insertQuery() throws ParseException {
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    jj_consume_token(LEGAL_IDENT);
    insertColumnsAndSource();
  }

  static final public void insertColumnsAndSource() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT_PAREN:{
      columnNameList();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    valueList();
  }

  static final public void valueList() throws ParseException {
    jj_consume_token(VALUES);
    jj_consume_token(LEFT_PAREN);
    value();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      value();
    }
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NULL:{
      jj_consume_token(NULL);
      break;
      }
    case INT_VALUE:
    case DATE_VALUE:
    case CHAR_STRING:{
      comparableValue();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* delete statement */
  static final public void deleteQuery() throws ParseException {
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    jj_consume_token(LEGAL_IDENT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      whereClause();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  static final public void tableColumn() throws ParseException {
    jj_consume_token(LEGAL_IDENT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PERIOD:{
      jj_consume_token(PERIOD);
      jj_consume_token(LEGAL_IDENT);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ScratchDBMSParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x902e0220,0x902e0200,0x902e0200,0x0,0x6000,0x800,0x6000,0x0,0x1c0,0x0,0x0,0x800000,0x1000000,0x0,0x800000,0x2000000,0x4000000,0x800,0x0,0x0,0x8000000,0x0,0x0,0x800,0x0,0x0,0x1000,0x1000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x8,0x200,0x0,0x0,0x8,0x0,0x8,0x240,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x1e02,0x1e00,0x100,0x1e00,0x1c00,0x0,0x2,0x8,0x1c00,0x0,0x10,};
   }

  /** Constructor with InputStream. */
  public ScratchDBMSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ScratchDBMSParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ScratchDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ScratchDBMSParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ScratchDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ScratchDBMSParser(ScratchDBMSParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ScratchDBMSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
