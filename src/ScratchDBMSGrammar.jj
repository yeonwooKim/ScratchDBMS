options
{
	static = true;
	DEBUG_PARSER = false;
	IGNORE_CASE = true;
}

PARSER_BEGIN(ScratchDBMSParser)

import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
import javafx.util.Pair;
import java.util.Arrays;

enum BufferName { DEFINITION, CONSTRAINT }

class Buffer {
    BufferName bn;
    ArrayList<String> arr;
    Attribute attr;

    public Buffer(BufferName bn, ArrayList<String> arr) {
        this.bn = bn;
        this.arr = arr;
    }

    public Buffer(BufferName bn, Attribute attr) {
        this.bn = bn;
        this.attr = attr;
    }

    public BufferName getBufferName() {
        return bn;
    }

    public ArrayList<String> getArr() {
        return arr;
    }

    public Attribute getAttr() {
        return attr;
    }
}

	public class ScratchDBMSParser
{
    private static Pair<Message, Attribute> getAttribute(Pair<String, String> tableColumn, String tablename) {
        String tn = tableColumn.getKey();
        String cn = tableColumn.getValue();
        Attribute ret = null;

        Table t = DBManager.getDBManager().findTable(tablename);
        if (t == null)
            return new Pair<Message, Attribute>(new Message(MessageName.NO_SUCH_TABLE), null);

        String[] tablenames = tablename.split("@");
        ArrayList<String> names = new ArrayList<String>(Arrays.asList(tablenames));
        ArrayList<String> aliases = null;
        if (t.getAlias() != null) {
            String[] tableAliases = t.getAlias().split("@");
            aliases = new ArrayList<String>(Arrays.asList(tableAliases));
        }

        if (tn != null && !names.contains(tn) && (aliases == null || !aliases.contains(tn)))
            return new Pair<Message, Attribute>(new Message(MessageName.WHERE_TABLE_NOT_SPECIFIED), null);

        Attribute attr = null;
        if (tn == null && t.hasAttributeAlias(cn)) { // attribute aliasing
            attr = t.findAttributeAlias(cn);
            if (attr == null)
                return new Pair<Message, Attribute>(new Message(MessageName.WHERE_AMBIGUOUS_REFERENCE), null);
            ret = attr;
        }
        if (t.hasAttribute(tn, cn)) {
            attr = t.findAttribute(tn, cn);
            if (attr == null || ret != null)
                return new Pair<Message, Attribute>(new Message(MessageName.WHERE_AMBIGUOUS_REFERENCE), null);
            ret = attr;
        }
        else if (ret == null) {
            return new Pair<Message, Attribute>(new Message(MessageName.WHERE_COLUMN_NOT_EXIST), null);
        }

        return new Pair<Message, Attribute>(null, ret);
    }
	public static void main(String args[]) throws ParseException
	{
	    Runtime.getRuntime().addShutdownHook(new Thread() {
              public void run() {
                Berkeley.getBerkeley().close();
              }
            });
	    Berkeley.getBerkeley().open();
		ScratchDBMSParser parser = new ScratchDBMSParser(System.in);
		MessagePrinter.printPrompt();

		while (true)
		{
			try
			{
				parser.command();
			}
			catch (Exception e)
			{
				MessagePrinter.printMessage(new Message(MessageName.SYNTAX_ERROR));
				ScratchDBMSParser.ReInit(System.in);
			}
		}
	}
}

PARSER_END(ScratchDBMSParser)

	SKIP : { " " | "\r" | "\t" | "\n" }

TOKEN : /* Keywords */
{
	< EXIT : "exit" >
		| < INT : "int" >
		| < CHAR : "char" >
		| < DATE : "date" >
		| < CREATE : "create" >
		| < TABLE : "table" >
		| < NOT : "not" >
		| < NULL : "null" >
		| < PRIMARY : "primary" >
		| < FOREIGN : "foreign" >
		| < KEY : "key" >
		| < REFERENCES : "references" >
		| < DROP : "drop" >
		| < DESC : "desc">
		| < SHOW : "show" >
		| < TABLES: "tables" >
		| < SELECT : "select" >
		| < FROM : "from" >
		| < AS : "as" >
		| < WHERE : "where" >
		| < OR : "or" >
		| < AND : "and" >
		| < IS : "is" >
		| < INSERT : "insert" >
		| < INTO : "into" >
		| < VALUES : "values" >
		| < DELETE : "delete" >
}

TOKEN :
{
	/* ordered properly according to precedence */
	< SEMICOLON : ";" >
		| < LEFT_PAREN : "(" >
		| < RIGHT_PAREN : ")" >
		| < COMMA : "," >
		| < PERIOD : "." >
		| < UNDERSCORE : "_" >
		| < ASTERISK : "*" >
		| < SIGN : "+" | "-" >
		| < COMP_OP : "<" | ">" | "=" | ">=" | "<=" | "!=" >
		| < LEGAL_IDENT : < ALPHABET > ( < ALPHABET > | < UNDERSCORE > )* >
		| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >
		| < DATE_VALUE : < DIGIT >< DIGIT >< DIGIT >< DIGIT > "-" < DIGIT >< DIGIT > "-" < DIGIT >< DIGIT > >
		| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHAR >)* < QUOTE > >
		| < NON_QUOTE_CHAR : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHAR > | " " >
		| < DIGIT : [ "0"-"9" ] >
		| < ALPHABET : [ "A"-"Z", "a"-"z" ] >
		| < NON_QUOTE_SPECIAL_CHAR : "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "-" | "+" | "(" | ")">
		| < QUOTE : "\'" >
}

void command() :
{}
{
	queryList()
		| (
				< EXIT >
				< SEMICOLON >
			)
		{
		    System.exit(0);
		}
}

void queryList() :
{
	Message m;
}
{
	(
	 m = query()
	 {
	 MessagePrinter.printMessage(m);
	 }
	)+
}

Message query() :
{
	Message m;
}
{
	(
	 (
		m = createTableQuery()
		{
		    if (m.getMessageName() == MessageName.CREATE_TABLE_SUCCESS)
		        Berkeley.getBerkeley().updateManager();
		}
	 )
	 | (
		 m = dropTableQuery()
		 {
		    if (m.getMessageName() == MessageName.DROP_SUCCESS)
            		        Berkeley.getBerkeley().updateManager();
		 }
		 )
	 | (
		 m = descQuery()
		 )
	 | (
		 m = selectQuery()
		 )
	 | (
		 m = insertQuery()
	    )
	 | (
			 m = deleteQuery()
		 )
	 | (
			 m = showTablesQuery()
		 )
	 )
	 (
		{
		return m;
		}
	 )
}

/* create table statement */
Message createTableQuery() :
{
    Token tok;
	String tablename;
	Table t;
	Message m = null;
	Message m1 = null;
}
{
	< CREATE > < TABLE >
		tok = < LEGAL_IDENT >
		{
		    tablename = tok.toString().toLowerCase();
			t = DBManager.getDBManager().findTable(tablename);
			if (t != null) {
			    m = new Message(MessageName.TABLE_EXISTENCE_ERROR);
			    t = null;
			}
			else
			    t = new Table(tablename);
		}
	m1 = tableElementList(t)
	{
	    if (m != null)
	        return m;
	    if (m1 != null)
	        return m1;
	    DBManager.getDBManager().addTable(t);
	    m = new Message(MessageName.CREATE_TABLE_SUCCESS);
	    m.setNameArg(tablename);
	    return m;
	}
}

Message tableElementList(Table t) :
{
    Message m = null;
    Buffer b;
    ArrayList<Attribute> attrList = new ArrayList<Attribute>();
    ArrayList<ArrayList<String>> arrList = new ArrayList<ArrayList<String>>();
}
{
	< LEFT_PAREN >
		b = tableElement()
		{
		    if (b.getBufferName() == BufferName.DEFINITION)
		        attrList.add(b.getAttr());
		    else
		        arrList.add(b.getArr());
		}
	(
	 < COMMA >
	    b = tableElement()
	    {
		    if (b.getBufferName() == BufferName.DEFINITION)
		        attrList.add(b.getAttr());
		    else
		        arrList.add(b.getArr());
	    }
	)*
	< RIGHT_PAREN >
	< SEMICOLON>
	{
	    if (t == null) return null;
	    Iterator<Attribute> it1 = attrList.iterator();
	    while (it1.hasNext()) {
	        Attribute attr = it1.next();
	        if (!attr.getAttributeType().isValid()) {
	            return new Message(MessageName.CHAR_LENGTH_ERROR);
	        }
	        m = t.addAttribute(attr);
	        if (m != null)
	            return m;
	    }
	    Iterator<ArrayList<String>> it2 = arrList.iterator();
	    while (it2.hasNext()) {
	        ArrayList<String> arr = it2.next();
	        if (arr.get(0).equals("0")) { // primary key definition
	            arr.remove(0);
	            m = t.setPrimaryKey(arr);
	            if (m != null)
	                return m;
	        }
	        else {
	            arr.remove(0);
	            String tablename = arr.get(0);
	            arr.remove(0);
	            int index = arr.indexOf("2");
	            List<String> aList = arr.subList(0, index);
	            List<String> bList = arr.subList(index + 1, arr.size());
                Table foreign_table = DBManager.getDBManager().findTable(tablename);
                if (foreign_table == null)
                    return new Message(MessageName.REFERENCE_TABLE_EXISTENCE_ERROR);
                else
                    m = t.setForeignKey(new ArrayList(aList), foreign_table, new ArrayList(bList));
                    if (m != null)
                        return m;
	        }
	    }
	    return null;
	}
}

Buffer tableElement() :
{
    Attribute attr = null;
    ArrayList<String> arr = null;
}
{
	((attr = columnDefinition())
		| (arr = tableConstraintDefinition()))
    {
        if (attr != null)
            return new Buffer(BufferName.DEFINITION, attr);
        else
            return new Buffer(BufferName.CONSTRAINT, arr);
    }
}

Attribute columnDefinition() :
{
	Type typ;
	Token tok;
	String columnname;
	Attribute attr;
}
{
	tok = < LEGAL_IDENT >
		typ = dataType()
		{
		    columnname = tok.toString().toLowerCase();
			attr = new Attribute(typ, columnname);
		}
	(
	 < NOT > < NULL >
	 {
	    attr.setNotNull();
	 }
	)?
	{
		return attr;
	}
}

ArrayList<String> tableConstraintDefinition() :
{
    ArrayList<String> arr;
}
{
	((arr = primaryKeyConstraint())
		| (arr = referentialConstraint()))
	{
	    return arr;
	}
}

ArrayList<String> primaryKeyConstraint() :
{
    ArrayList<String> arr;
}
{
	< PRIMARY > < KEY >
	     arr = columnNameList()
	{
	    arr.add(0,"0");
	    return arr;
	}
}

ArrayList<String> referentialConstraint() :
{
    ArrayList<String> arr1;
    ArrayList<String> arr2;
    Token tok;
    String tablename;
}
{
	< FOREIGN > < KEY >
		arr1 = columnNameList()
		< REFERENCES >
		tok = < LEGAL_IDENT >
		arr2 = columnNameList()
		{
		    tablename = tok.toString().toLowerCase();
		    arr1.add(0,"1");
		    arr1.add(1, tablename);
		    arr1.add("2");
		    arr1.addAll(arr2);
		    return arr1;
		}
}

ArrayList<String> columnNameList() :
{
    ArrayList<String> arr = new ArrayList<String>();
    Token tok;
    String s;
}
{
	< LEFT_PAREN >
		tok = < LEGAL_IDENT >
		{
		    s = tok.toString().toLowerCase();
		    arr.add(s);
		}
		(
		 < COMMA >
		 tok = < LEGAL_IDENT >
		 {
		    s = tok.toString().toLowerCase();
		    arr.add(s);
		 }
		)*
	< RIGHT_PAREN >
	{
	    return arr;
	}
}

Type dataType() :
{
    Type t;
    Token tok;
    String intval;
}
{
	(< INT >
	{
	    t = new Type(TypeName.INT, -1);
	    return t;
	})
		| (
				< CHAR >
				< LEFT_PAREN >
				tok = < INT_VALUE >
				< RIGHT_PAREN >
				{
				    intval = tok.toString();
				    t = new Type(TypeName.CHAR, Integer.parseInt(intval));
				    return t;
				}
			)
		| (< DATE >
		{
		    t = new Type(TypeName.DATE, -1);
		    return t;
		})

}

/* drop table statement */
Message dropTableQuery() :
{
    Token tok;
	String tablename;
	Message m;
}
{
	< DROP > < TABLE >
		tok = < LEGAL_IDENT >
		< SEMICOLON >
		{
		    tablename = tok.toString().toLowerCase();
			m = DBManager.getDBManager().dropTable(tablename);
			return m;
		}
}

/* desc statement */
Message descQuery() :
{
    Token tok;
	String tablename;
	Message m;
}
{
	< DESC >
		tok = < LEGAL_IDENT >
		< SEMICOLON >
		{
		    tablename = tok.toString().toLowerCase();
		    m = new Message(MessageName.DESC_TABLE);
		    m.setNameArg(tablename);
			return m;
		}
}

/* show tables statement */
Message showTablesQuery() :
{}
{
	< SHOW > < TABLES >
	< SEMICOLON >
	{
		return new Message(MessageName.SHOW_TABLES);
	}
}

/* select statement */
Message selectQuery() :
{
    ArrayList<Pair<Pair<String, String>, String>> arr;
    Message m;
}
{
	< SELECT >
		arr = selectList()
		m = tableExpression(arr)
	{
	   return m;
	}
}

ArrayList<Pair<Pair<String, String>, String>> selectList() :
{
    ArrayList<Pair<Pair<String, String>, String>> arr = new ArrayList<Pair<Pair<String, String>, String>>();
    Pair<Pair<String, String>, String> p;
}
{
	((< ASTERISK >
	{
	    return null;
	})
		|   (p = selectedColumn() {
		    arr.add(p);
		}
		( < COMMA > p = selectedColumn() {
		    arr.add(p);
		})*)) {
		    return arr;
		}
}

Pair<Pair<String, String>, String> selectedColumn() :
{
    Pair<String, String> tc;
    Token tok;
    String alias = null;
}
{
	tc = tableColumn()
		( < AS > tok = < LEGAL_IDENT > {
		    alias = tok.toString().toLowerCase();
		})?
		{
		    return new Pair<Pair<String, String>, String>(tc, alias);
		}
}

Message tableExpression(ArrayList<Pair<Pair<String, String>, String>> columns) :
{
    Message m = null;
    Message m1 = null;
    BooleanValueExpression bve = new BooleanValueExpression();
    ArrayList<Pair<String, String>> tables;
    Pair<String, String> table;
    Table t;
    Pair<Pair<String, String>, String> column;
    String tablename, columnname, alias;
    Attribute attr;
    Table newTable = null;
    String newTablename = "";
    String newTableAlias = "";
    ArrayList<Attribute> newAttr = new ArrayList<Attribute>();
    ArrayList<Integer> projection = new ArrayList<Integer>();
}
{
	tables = fromClause()
	{
	    Iterator<Pair<String, String>> itTable = tables.iterator();
	    while (itTable.hasNext()) {
	        table = itTable.next();
	        t = DBManager.getDBManager().findTable(table.getKey());
	        if (t == null) {
	             m = new Message(MessageName.SELECT_TABLE_EXISTENCE_ERROR);
	             m.setNameArg(table.getKey());
	             break;
	        }
            t.setAlias(table.getValue());
            if (table.getValue() != null) {
                newTableAlias += table.getValue();
                newTableAlias += "@";
            }
            Iterator<Attribute> itAttr = t.getAttrList().iterator();
            while (itAttr.hasNext()) {
                newAttr.add((Attribute) ((Attribute)itAttr.next()).clone());
            }
            t.setAlias(null);
            newTablename += table.getKey();
            newTablename += "@";
	    }
        newTable = new Table(newAttr, newTablename, newTableAlias);
        DBManager.getDBManager().addTable(newTable);
	    if (m == null) {
	        if (columns == null) {
	             projection = null;
	        }
	        else {
                Iterator<Pair<Pair<String, String>, String>> itColumn = columns.iterator();
                while (itColumn.hasNext()) {
                    column = itColumn.next();
                    tablename = column.getKey().getKey();
                    columnname = column.getKey().getValue();
                    alias = column.getValue();

                    if (newTable.hasAttribute(tablename, columnname)) {
                         attr = newTable.findAttribute(tablename, columnname);
                         if (attr == null) {
                            m = new Message(MessageName.SELECT_COLUMN_RESOLVE_ERROR);
                            m.setNameArg(columnname);
                            break;
                         }
                    }
                    else {
                        m = new Message(MessageName.SELECT_COLUMN_RESOLVE_ERROR);
                        m.setNameArg(columnname);
                        break;
                    }
                    attr.setAlias(alias);
                    projection.add(newTable.getAttrList().indexOf(attr));
                }
            }
	    }
	}
		( m1 = whereClause(bve, newTablename) {
		    if (m == null)
		        m = m1;
		})?
        < SEMICOLON >
		{
            if (m == null) {
                if (bve.isEmpty()) {
                    Berkeley.getBerkeley().select(newTablename, null, projection);
                }
                else {
                    Berkeley.getBerkeley().select(newTablename, bve, projection);
                }
                m = new Message(MessageName.SELECT_SUCCESS);
            }
            DBManager.getDBManager().dropTable(newTablename);
            return m;
		}
}

ArrayList<Pair<String, String>> fromClause() :
{
    ArrayList<Pair<String, String>> arr;
}
{
	< FROM > arr = tableReferenceList()
	{
	    return arr;
	}
}

ArrayList<Pair<String, String>> tableReferenceList() :
{
    ArrayList<Pair<String, String>> arr = new ArrayList<Pair<String, String>>();
    Pair<String, String> p;
}
{
	p = referredTable() {
	    arr.add(p);
	}
		( < COMMA > p = referredTable() {
		    arr.add(p);
		})*
		{
		    return arr;
		}
}

Pair<String, String> referredTable() :
{
    Token tok1;
    Token tok2;
    String tablename = null;
    String alias = null;
}
{
	tok1 = < LEGAL_IDENT > {
	    tablename = tok1.toString().toLowerCase();
	}
		( < AS > tok2 = < LEGAL_IDENT >  {
		    alias = tok2.toString().toLowerCase();
		})?

		{
		    return new Pair<String, String>(tablename, alias);
		}
}

Message whereClause(BooleanValueExpression bve, String t) :
{
    Message m = null;
}
{
	< WHERE > m = booleanValueExpression(bve, t)
	{
	    return m;
	}
}

Message booleanValueExpression(BooleanValueExpression b, String t) :
{
    Message m = null;
    Message m1 = null;
}
{
	/* eliminate left recursion */
	 m = booleanTerm(b, t)

	  ( < OR > m1 = booleanTerm(b, t)
	   {
	        if (m == null) m = m1;
	   }
	   )*
	   {
	        return m;
	   }
}

Message booleanTerm(BooleanValueExpression b, String t) :
{
    Message m = null;
    Message m1 = null;
    BooleanTerm bt = new BooleanTerm();
}
{
	/* eliminate left recursion */
	m = booleanFactor(bt, t)
	 ( < AND > m1 = booleanFactor(bt, t)
	  {
	    if (m == null) m = m1;
	  })*
	  {
	    b.addTerm(bt);
	    return m;
	  }
}

Message booleanFactor(BooleanTerm bt, String t) :
{
    Message m = null;
    Token tok = null;
    BooleanFactor bf = new BooleanFactor();
}
{
	( tok = < NOT > )?
		m = booleanTest(bf, t)
		{
		    if (tok != null)
		        bf.setNot();
		    bt.addFactor(bf);
	        return m;
		}
}

Message booleanTest(BooleanFactor bf, String t) :
{
    Message m = null;
    BooleanTest bte = new BooleanTest();
}
{
	(m = predicate(bte, t)
		| m = parenthesizedBooleanExpression(bte, t))
	{
	    bf.setTest(bte);
	    return m;
	}
}

Message parenthesizedBooleanExpression(BooleanTest bte, String t) :
{
    BooleanValueExpression bve = new BooleanValueExpression();
    ParenthesizedBooleanExpression pbe;
    Message m = null;
}
{
	< LEFT_PAREN > m = booleanValueExpression(bve, t) < RIGHT_PAREN >
	{
        pbe = new ParenthesizedBooleanExpression(bve);
        bte.setParen(pbe);
        return m;
	}
}

Message predicate(BooleanTest bte, String t) :
{
    Message m = null;
    Predicate pred = new Predicate();
}
{
	/* revised to remove lookahead */
	(m = identifierPredicate(pred, t)
	 | m = constantPredicate(pred, t))
	{
	    bte.setPredicate(pred);
	    return m;
	}
}

Message identifierPredicate(Predicate pred, String t) :
{
    Message m = null;
    IdentifierPredicate idPred = new IdentifierPredicate();
    CompareOperand c;
    Token tok;
    String operator;
    boolean b;
    Pair <Message, Attribute> p;
    Pair <Message, CompareOperand> p1;
    Attribute attr;
    CompareOperation compOp;
    NullOperation nullOp;
    TypeName t1 = null, t2 = null;
    Pair<String, String> tc;
}
{
	tc = tableColumn() {
	    p = getAttribute(tc, t);
	    m = p.getKey();
	    attr = p.getValue();
	    if (m == null) {
	        idPred.setID(attr);
	        t1 = attr.getAttributeType().getTypename();
	    }
	}
		( ( tok = < COMP_OP >
		 p1 = compOperand(t) {
		    if (m == null)
		        m = p1.getKey();
		    if (m == null) {
                c = p1.getValue();
                t2 = c.getTypename();
                if (t2 != null && t1 != t2)
                    return new Message(MessageName.WHERE_INCOMPARABLE);
                operator = tok.toString();
                compOp = new CompareOperation(c, operator);
                idPred.setCompOperation(compOp);
            }
		 })
			| b = nullOperation() {
		        nullOp = new NullOperation(b);
			    idPred.setNullOperation(nullOp);
			})
			{
			    pred.setIdPredicate(idPred);
			    return m;
			}
}

Message constantPredicate(Predicate pred, String t) :
{
    Message m = null;
    Value v;
    Token tok;
    String operator;
    CompareOperand c;
    Pair <Message, CompareOperand> p;
    ConstantPredicate constPred = new ConstantPredicate();
    CompareOperation compOp;
    TypeName t1 = null, t2 = null;
}
{
	v = comparableValue() {
	    constPred.setConst(v);
	    t1 = v.getTypename();
	}
		tok = < COMP_OP >
		p = compOperand(t)
		{
		    m = p.getKey();
		    if (m == null) {
		        c = p.getValue();
		        t2 = c.getTypename();
		        if (t1 != null && t2 != null && t1 != t2)
		           return new Message(MessageName.WHERE_INCOMPARABLE);
                operator = tok.toString();
                compOp = new CompareOperation(c, operator);
                constPred.setCompOperation(compOp);
	        }
	        pred.setConstPredicate(constPred);
	        return m;
		}
}

Pair<Message, CompareOperand> compOperand(String t) :
{
    Value v;
    Pair<Message, Attribute> p;
    CompareOperand c = new CompareOperand();
    Message m = null;
    Pair<String, String> tc;
}
{
	((v = comparableValue() {
	    c.setValue(v);
	})
		| (tc = tableColumn()) {
	        p = getAttribute(tc, t);
		   m = p.getKey();
		   if (m == null) {
		        c.setAttribute(p.getValue());
		   }
		})
		{
		    return new Pair<Message, CompareOperand>(m, c);
		}
}

Value comparableValue() :
{
    Token t;
    Integer i;
    String cd;
    Value v;
}
{
	((t = < INT_VALUE > { i = new Integer(Integer.parseInt(t.toString()));
	                     v = new Value(TypeName.INT);
	                     v.setIntVal(i); })
	|
	(t = < CHAR_STRING > { cd = t.toString();
	                       v = new Value(TypeName.CHAR);
	                       v.setStringVal(cd.substring(1, cd.length() - 1)); })
	|
	(t = < DATE_VALUE > { cd = t.toString();
	                      v = new Value(TypeName.DATE);
	                      v.setDateVal(cd); }))
    { return v; }
}

boolean nullOperation() :
{
    Token tok = null;
}
{
	< IS > ( tok = < NOT > )? < NULL >
	{
	   if (tok == null)
	        return true;
	   else
	        return false;
	}
}

/* insert statement */
Message insertQuery() :
{
    Token t;
    String tablename;
    Message m = null;
    Record rec = new Record();
}
{
	< INSERT > < INTO >
		t = < LEGAL_IDENT >
		{
		    tablename = t.toString().toLowerCase();
		}
		m = insertColumnsAndSource(tablename, rec)
		< SEMICOLON >
		{
		    if (m == null) {
		        Berkeley.getBerkeley().insertRecord(tablename, rec);
		        m = new Message(MessageName.INSERT_SUCCESS);
		    }
		    return m;
		}
}

Message insertColumnsAndSource(String tablename, Record rec) :
{
    Message m = null;
    ArrayList<String> arr = null;
}
{
	( arr = columnNameList() )?
		m = valueList(arr, tablename, rec)
		{
		    return m;
		}
}

Message valueList(ArrayList<String> arr, String tablename, Record rec) :
{
    Message m = null;
    ArrayList<Value> valArr = new ArrayList<Value>();
    Value v;
    boolean explicit = true;
    Table table;
}
{
    {
        table = DBManager.getDBManager().findTable(tablename);
        if (table == null)
            m = new Message(MessageName.NO_SUCH_TABLE);
        else if (arr != null)
            m = Record.verifyColumnList(arr, table);
    }
	< VALUES >
		< LEFT_PAREN >
		v = value()
		{
		    valArr.add(v);
		}
		( < COMMA > v = value()
		 {
		    valArr.add(v);
		 }
		 )*
		< RIGHT_PAREN >
		{
		    if (m == null && arr != null && valArr.size() != arr.size()) {
		        m = new Message(MessageName.INSERT_TYPE_MISMATCH);
		    }
		    if (m == null) {
		        if (arr == null)
		            explicit = false;
                m = rec.addValues(explicit, valArr, table);
		    }
		    return m;
		}
}

Value value() :
{
    Value v;
}
{
	((< NULL >
	{
	   v = new Value();
	})
	|
	(v = comparableValue()))
	{
	    return v;
	}
}

/* delete statement */
Message deleteQuery() :
{
    Token tok;
    String tablename;
    Table t;
    BooleanValueExpression bve = new BooleanValueExpression();
    Message m = null;
}
{
	< DELETE > < FROM > tok = < LEGAL_IDENT > {
	   tablename = tok.toString().toLowerCase();
	}
		( m = whereClause(bve, tablename) )?
	< SEMICOLON >
	{
	    if (m == null) {
	        if (bve.isEmpty()) {
	            m = Berkeley.getBerkeley().removeRecord(tablename, null);
	        }
	        else {
	            m = Berkeley.getBerkeley().removeRecord(tablename, bve);
	        }
	    }
	    return m;
	}
}

Pair<String, String> tableColumn() :
{
    Token tok1;
    Token tok2;
    String tablename = null;
    String columnname = null;
}
{
	tok1 = < LEGAL_IDENT >
		( < PERIOD > tok2 = < LEGAL_IDENT > {
		   tablename = tok1.toString().toLowerCase();
		   columnname = tok2.toString().toLowerCase();
		})?
		{
		    if (tablename == null) {
		        columnname = tok1.toString().toLowerCase();
		    }

            return new Pair<String, String>(tablename, columnname);
		}
}
