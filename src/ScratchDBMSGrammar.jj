options
{
	static = true;
	DEBUG_PARSER = false;
	IGNORE_CASE = true;
}

PARSER_BEGIN(ScratchDBMSParser)

import java.util.ArrayList;

	public class ScratchDBMSParser
{
	public static void main(String args[]) throws ParseException
	{
		ScratchDBMSParser parser = new ScratchDBMSParser(System.in);
		MessagePrinter.printPrompt();

		while (true)
		{
			try
			{
				parser.command();
			}
			catch (Exception e)
			{
				MessagePrinter.printMessage(new Message(MessageName.SYNTAX_ERROR));
				ScratchDBMSParser.ReInit(System.in);
			}
		}
	}
}

PARSER_END(ScratchDBMSParser)

	SKIP : { " " | "\r" | "\t" | "\n" }

TOKEN : /* Keywords */
{
	< EXIT : "exit" >
		| < INT : "int" >
		| < CHAR : "char" >
		| < DATE : "date" >
		| < CREATE_TABLE : "create table" >
		| < NOT_NULL : "not null" >
		| < NULL : "null" >
		| < PRIMARY_KEY : "primary key" >
		| < FOREIGN_KEY : "foreign key" >
		| < REFERENCES : "references" >
		| < DROP_TABLE : "drop table" >
		| < DESC : "desc">
		| < SHOW_TABLES : "show tables" >
		| < SELECT : "select" >
		| < FROM : "from" >
		| < AS : "as" >
		| < WHERE : "where" >
		| < OR : "or" >
		| < AND : "and" >
		| < NOT : "not" >
		| < IS_NULL : "is null" >
		| < IS_NOT_NULL : "is not null" >
		| < INSERT_INTO : "insert into" >
		| < VALUES : "values" >
		| < DELETE_FROM : "delete from" >
}

TOKEN :
{
	/* ordered properly according to precedence */
	< SEMICOLON : ";" >
		| < LEFT_PAREN : "(" >
		| < RIGHT_PAREN : ")" >
		| < COMMA : "," >
		| < PERIOD : "." >
		| < UNDERSCORE : "_" >
		| < ASTERISK : "*" >
		| < SIGN : "+" | "-" >
		| < COMP_OP : "<" | ">" | "=" | ">=" | "<=" | "!=" >
		| < LEGAL_IDENT : < ALPHABET > ( < ALPHABET > | < UNDERSCORE > )* >
		| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >
		| < DATE_VALUE : < DIGIT >< DIGIT >< DIGIT >< DIGIT > "-" < DIGIT >< DIGIT > "-" < DIGIT >< DIGIT > >
		| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHAR >)* < QUOTE > >
		| < NON_QUOTE_CHAR : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHAR > | " " >
		| < DIGIT : [ "0"-"9" ] >
		| < ALPHABET : [ "A"-"Z", "a"-"z" ] >
		| < NON_QUOTE_SPECIAL_CHAR : "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" >
		| < QUOTE : "\'" >
}

void command() :
{}
{
	queryList()
		| (
				< EXIT >
				< SEMICOLON >
				{
				System.exit(0);
				}
			)
}

void queryList() :
{
	Message m;
}
{
	(
	 m = query()
	 < SEMICOLON >
	 {
	 MessagePrinter.printMessage(m);
	 }
	)+
}

Message query() :
{
	Message m;
}
{
	(
	 (
		m = createTableQuery()
	 )
	 | (
		 m = dropTableQuery()
		 )
	 | (
		 m = descQuery()
		 )
	 | (
		 selectQuery()
		 {
		 m = new Message(MessageName.SELECT);
		 }
		 )
	 | (
		 insertQuery()
		 {
		 m = new Message(MessageName.INSERT);
		 }
		 )
	 | (
			 deleteQuery()
			 {
			 m = new Message(MessageName.DELETE);
			 }
		 )
	 | (
			 m = showTablesQuery()
		 )
	 )
	 (
		{
		return m;
		}
	 )
}

/* create table statement */
Message createTableQuery() :
{
    Token tok;
	String tablename;
	Table t;
	Message m;
}
{
	< CREATE_TABLE >
		tok = < LEGAL_IDENT >
		{
		    tablename = tok.toString();
			t = DBManager.getDBManager().findTable(tablename);
			if (t != null)
				return new Message(MessageName.TABLE_EXISTENCE_ERROR);
			t = new Table(tablename);
		}
	m = tableElementList(t)
	{
	    if (m != null)
	        return m;
	    DBManager.getDBManager().addTable(t);
	    return new Message(MessageName.CREATE_TABLE_SUCCESS, tablename);
	}
}

Message tableElementList(Table t) :
{
    Message m;
}
{
	< LEFT_PAREN >
		m = tableElement(t)
		{
			if (m != null)
				return m;
		}
	(
	 < COMMA >
	 m = tableElement(t)
	 {
	    if (m != null)
	        return m;
	 }
	)*
	< RIGHT_PAREN >
	{
	    return null;
	}
}

Message tableElement(Table t) :
{
    Message m;
}
{
	((m = columnDefinition(t))
		| (m = tableConstraintDefinition(t)))
	{
	    return m;
	}
}

Message columnDefinition(Table t) :
{
	Type typ;
	Token tok;
	String columnname;
	Attribute attr;
	Message m;
}
{
	tok = < LEGAL_IDENT >
		typ = dataType()
		{
		    columnname = tok.toString();
		    if (!typ.isValid())
		        return new Message(MessageName.CHAR_LENGTH_ERROR);
			attr = new Attribute(typ, columnname);
		}
	(
	 < NOT_NULL >
	 {
	    attr.setNotNull();
	 }
	)?
	{
		m = t.addAttribute(attr);
		return m;
	}
}

Message tableConstraintDefinition(Table t) :
{
    Message m;
}
{
	((m = primaryKeyConstraint(t))
		| (m = referentialConstraint(t)))
	{
	    return m;
	}
}

Message primaryKeyConstraint(Table t) :
{
    Message m;
    ArrayList<String> arr;
}
{
	< PRIMARY_KEY >
	     arr = columnNameList()
	{
	    m = t.setPrimaryKey(arr);
	    return m;
	}
}

Message referentialConstraint(Table t) :
{
    Message m;
    ArrayList<String> arr1;
    ArrayList<String> arr2;
    Table foreign_table;
    Token tok;
    String tablename;
}
{
	< FOREIGN_KEY >
		arr1 = columnNameList()
		< REFERENCES >
		tok = < LEGAL_IDENT >
		arr2 = columnNameList()
		{
		    tablename = tok.toString();
		    foreign_table = DBManager.getDBManager().findTable(tablename);
		    if (foreign_table == null)
		        return new Message(MessageName.REFERENCE_TABLE_EXISTENCE_ERROR);
		    m = t.setForeignKey(arr1, foreign_table, arr2);
		    return m;
		}
}

ArrayList<String> columnNameList() :
{
    ArrayList<String> arr = new ArrayList<String>();
    Token tok;
    String s;
}
{
	< LEFT_PAREN >
		tok = < LEGAL_IDENT >
		{
		    s = tok.toString();
		    arr.add(s);
		}
		(
		 < COMMA >
		 tok = < LEGAL_IDENT >
		 {
		    s = tok.toString();
		    arr.add(s);
		 }
		)*
		< RIGHT_PAREN >
	{
	    return arr;
	}
}

Type dataType() :
{
    Type t;
    Token tok;
    String intval;
}
{
	(< INT >
	{
	    t = new Type(TypeName.INT, -1);
	    return t;
	})
		| (
				< CHAR >
				< LEFT_PAREN >
				tok = < INT_VALUE >
				< RIGHT_PAREN >
				{
				    intval = tok.toString();
				    t = new Type(TypeName.CHAR, Integer.parseInt(intval));
				    return t;
				}
			)
		| (< DATE >
		{
		    t = new Type(TypeName.DATE, -1);
		    return t;
		})

}

/* drop table statement */
Message dropTableQuery() :
{
    Token tok;
	String tablename;
	Message m;
}
{
	< DROP_TABLE >
		tok = < LEGAL_IDENT >
		{
		    tablename = tok.toString();
			m = DBManager.getDBManager().dropTable(tablename);
			return m;
		}
}

/* desc statement */
Message descQuery() :
{
    Token tok;
	String tablename;
}
{
	< DESC >
		tok = < LEGAL_IDENT >
		{
		    tablename = tok.toString();
			return new Message(MessageName.DESC_TABLE, tablename);
		}
}

/* show tables statement */
Message showTablesQuery() :
{}
{
	< SHOW_TABLES >
	{
		return new Message(MessageName.SHOW_TABLES);
	}
}

/* select statement */
void selectQuery() :
{}
{
	< SELECT >
		selectList()
		tableExpression()
}

void selectList() :
{}
{
	< ASTERISK >
		|   selectedColumn()
		( < COMMA > selectedColumn() )*
}

void selectedColumn() :
{}
{
	tableColumn()
		( < AS > < LEGAL_IDENT > )?
}

void tableExpression() :
{}
{
	fromClause()
		( whereClause() )?
}

void fromClause() :
{}
{
	< FROM > tableReferenceList()
}

void tableReferenceList() :
{}
{
	referredTable()
		( < COMMA > referredTable() )*
}

void referredTable() :
{}
{
	< LEGAL_IDENT >
		( < AS > < LEGAL_IDENT > )?
}

void whereClause() :
{}
{
	< WHERE > booleanValueExpression()
}

void booleanValueExpression() :
{}
{
	/* eliminate left recursion */
	booleanTerm() ( < OR > booleanTerm() )*
}

void booleanTerm() :
{}
{
	/* eliminate left recursion */
	booleanFactor() ( < AND > booleanFactor() )*
}

void booleanFactor() :
{}
{
	( < NOT > )?
		booleanTest()
}

void booleanTest() :
{}
{
	predicate()
		| parenthesizedBooleanExpression()
}

void parenthesizedBooleanExpression() :
{}
{
	< LEFT_PAREN > booleanValueExpression() < RIGHT_PAREN >
}

void predicate() :
{}
{
	/* revised to remove lookahead */
	identifierPredicate() | constantPredicate()
}

void identifierPredicate() :
{}
{
	tableColumn()
		( ( < COMP_OP > compOperand() )
			| nullOperation() ) 
}

void constantPredicate() :
{}
{
	comparableValue()
		< COMP_OP >
		compOperand()
}

void compOperand() :
{}
{
	comparableValue()
		| tableColumn()
}

void comparableValue() :
{}
{
	< INT_VALUE > | < CHAR_STRING > | < DATE_VALUE >
}

void nullOperation() :
{}
{
	< IS_NULL > | < IS_NOT_NULL >
}

/* insert statement */
void insertQuery() :
{}
{
	< INSERT_INTO >
		< LEGAL_IDENT >
		insertColumnsAndSource()
}

void insertColumnsAndSource() :
{}
{
	( columnNameList() )?
		valueList()
}

void valueList() :
{}
{
	< VALUES >
		< LEFT_PAREN >
		value()
		( < COMMA > value() )*
		< RIGHT_PAREN >
}

void value() :
{}
{
	< NULL > | comparableValue()
}

/* delete statement */
void deleteQuery() :
{}
{
	< DELETE_FROM > < LEGAL_IDENT >
		( whereClause() )?
}

void tableColumn() :
{}
{
	< LEGAL_IDENT >
		( < PERIOD > < LEGAL_IDENT > )?
}
