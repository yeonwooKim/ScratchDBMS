options
{
	static = true;
	DEBUG_PARSER = false;
	IGNORE_CASE = true;
}

PARSER_BEGIN(ScratchDBMSParser)

import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;

enum BufferName { DEFINITION, CONSTRAINT }

class Buffer {
    BufferName bn;
    ArrayList<String> arr;
    Attribute attr;

    public Buffer(BufferName bn, ArrayList<String> arr) {
        this.bn = bn;
        this.arr = arr;
    }

    public Buffer(BufferName bn, Attribute attr) {
        this.bn = bn;
        this.attr = attr;
    }

    public BufferName getBufferName() {
        return bn;
    }

    public ArrayList<String> getArr() {
        return arr;
    }

    public Attribute getAttr() {
        return attr;
    }
}

	public class ScratchDBMSParser
{
	public static void main(String args[]) throws ParseException
	{
	    Runtime.getRuntime().addShutdownHook(new Thread() {
              public void run() {
                Berkeley.getBerkeley().close();
              }
            });
	    Berkeley.getBerkeley().open();
		ScratchDBMSParser parser = new ScratchDBMSParser(System.in);
		MessagePrinter.printPrompt();

		while (true)
		{
			try
			{
				parser.command();
			}
			catch (Exception e)
			{
				MessagePrinter.printMessage(Message.getSyntaxError());
				ScratchDBMSParser.ReInit(System.in);
			}
		}
	}
}

PARSER_END(ScratchDBMSParser)

	SKIP : { " " | "\r" | "\t" | "\n" }

TOKEN : /* Keywords */
{
	< EXIT : "exit" >
		| < INT : "int" >
		| < CHAR : "char" >
		| < DATE : "date" >
		| < CREATE : "create" >
		| < TABLE : "table" >
		| < NOT : "not" >
		| < NULL : "null" >
		| < PRIMARY : "primary" >
		| < FOREIGN : "foreign" >
		| < KEY : "key" >
		| < REFERENCES : "references" >
		| < DROP : "drop" >
		| < DESC : "desc">
		| < SHOW : "show" >
		| < TABLES: "tables" >
		| < SELECT : "select" >
		| < FROM : "from" >
		| < AS : "as" >
		| < WHERE : "where" >
		| < OR : "or" >
		| < AND : "and" >
		| < IS : "is" >
		| < INSERT : "insert" >
		| < INTO : "into" >
		| < VALUES : "values" >
		| < DELETE : "delete" >
}

TOKEN :
{
	/* ordered properly according to precedence */
	< SEMICOLON : ";" >
		| < LEFT_PAREN : "(" >
		| < RIGHT_PAREN : ")" >
		| < COMMA : "," >
		| < PERIOD : "." >
		| < UNDERSCORE : "_" >
		| < ASTERISK : "*" >
		| < SIGN : "+" | "-" >
		| < COMP_OP : "<" | ">" | "=" | ">=" | "<=" | "!=" >
		| < LEGAL_IDENT : < ALPHABET > ( < ALPHABET > | < UNDERSCORE > )* >
		| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >
		| < DATE_VALUE : < DIGIT >< DIGIT >< DIGIT >< DIGIT > "-" < DIGIT >< DIGIT > "-" < DIGIT >< DIGIT > >
		| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHAR >)* < QUOTE > >
		| < NON_QUOTE_CHAR : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHAR > | " " >
		| < DIGIT : [ "0"-"9" ] >
		| < ALPHABET : [ "A"-"Z", "a"-"z" ] >
		| < NON_QUOTE_SPECIAL_CHAR : "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" >
		| < QUOTE : "\'" >
}

void command() :
{}
{
	queryList()
		| (
				< EXIT >
				< SEMICOLON >
			)
		{
		    System.exit(0);
		}
}

void queryList() :
{
	Message m;
}
{
	(
	 m = query()
	 {
	 MessagePrinter.printMessage(m);
	 }
	)+
}

Message query() :
{
	Message m;
}
{
	(
	 (
		m = createTableQuery()
		{
		    if (m.getMessagename() == MessageName.CREATE_TABLE_SUCCESS)
		        Berkeley.getBerkeley().updateManager();
		}
	 )
	 | (
		 m = dropTableQuery()
		 {
		    if (m.getMessagename() == MessageName.DROP_SUCCESS)
            		        Berkeley.getBerkeley().updateManager();
		 }
		 )
	 | (
		 m = descQuery()
		 )
	 | (
		 selectQuery()
		 {
		 m = Message.getSelect();
		 }
		 )
	 | (
		 m = insertQuery()
	    )
	 | (
			 deleteQuery()
			 {
			 m = Message.getDelete();
			 }
		 )
	 | (
			 m = showTablesQuery()
		 )
	 )
	 (
		{
		return m;
		}
	 )
}

/* create table statement */
Message createTableQuery() :
{
    Token tok;
	String tablename;
	Table t;
	Message m = null;
	Message m1 = null;
}
{
	< CREATE > < TABLE >
		tok = < LEGAL_IDENT >
		{
		    tablename = tok.toString();
			t = DBManager.getDBManager().findTable(tablename);
			if (t != null)
			    m = Message.getTableExistence();
			t = new Table(tablename);
		}
	m1 = tableElementList(t)
	{
	    if (m != null)
	        return m;
	    if (m1 != null)
	        return m1;
	    DBManager.getDBManager().addTable(t);
	    m = Message.getCreateTableSuccess();
	    m.setNameArg(tablename);
	    return m;
	}
}

Message tableElementList(Table t) :
{
    Message m = null;
    Buffer b;
    ArrayList<Attribute> attrList = new ArrayList<Attribute>();
    ArrayList<ArrayList<String>> arrList = new ArrayList<ArrayList<String>>();
}
{
	< LEFT_PAREN >
		b = tableElement(t)
		{
		    if (b.getBufferName() == BufferName.DEFINITION)
		        attrList.add(b.getAttr());
		    else
		        arrList.add(b.getArr());
		}
	(
	 < COMMA >
	    b = tableElement(t)
	    {
		    if (b.getBufferName() == BufferName.DEFINITION)
		        attrList.add(b.getAttr());
		    else
		        arrList.add(b.getArr());
	    }
	)*
	< RIGHT_PAREN >
	< SEMICOLON>
	{
	    Iterator<Attribute> it1 = attrList.iterator();
	    while (it1.hasNext()) {
	        Attribute attr = it1.next();
	        if (!attr.getAttributeType().isValid()) {
	            return Message.getCharLength();
	        }
	        m = t.addAttribute(attr);
	        if (m != null)
	            return m;
	    }
	    Iterator<ArrayList<String>> it2 = arrList.iterator();
	    while (it2.hasNext()) {
	        ArrayList<String> arr = it2.next();
	        if (arr.get(0).equals("0")) { // primary key definition
	            arr.remove(0);
	            m = t.setPrimaryKey(arr);
	            if (m != null)
	                return m;
	        }
	        else {
	            arr.remove(0);
	            String tablename = arr.get(0);
	            arr.remove(0);
	            int index = arr.indexOf("2");
	            List<String> aList = arr.subList(0, index);
	            List<String> bList = arr.subList(index + 1, arr.size());
                Table foreign_table = DBManager.getDBManager().findTable(tablename);
                if (foreign_table == null)
                    return Message.getReferenceTableExistence();
                else
                    m = t.setForeignKey(new ArrayList(aList), foreign_table, new ArrayList(bList));
                    if (m != null)
                        return m;
	        }
	    }
	    return null;
	}
}

Buffer tableElement(Table t) :
{
    Attribute attr = null;
    ArrayList<String> arr = null;
}
{
	((attr = columnDefinition(t))
		| (arr = tableConstraintDefinition(t)))
    {
        if (attr != null)
            return new Buffer(BufferName.DEFINITION, attr);
        else
            return new Buffer(BufferName.CONSTRAINT, arr);
    }
}

Attribute columnDefinition(Table t) :
{
	Type typ;
	Token tok;
	String columnname;
	Attribute attr;
}
{
	tok = < LEGAL_IDENT >
		typ = dataType()
		{
		    columnname = tok.toString();
			attr = new Attribute(typ, columnname);
		}
	(
	 < NOT > < NULL >
	 {
	    attr.setNotNull();
	 }
	)?
	{
		return attr;
	}
}

ArrayList<String> tableConstraintDefinition(Table t) :
{
    ArrayList<String> arr;
}
{
	((arr = primaryKeyConstraint(t))
		| (arr = referentialConstraint(t)))
	{
	    return arr;
	}
}

ArrayList<String> primaryKeyConstraint(Table t) :
{
    ArrayList<String> arr;
}
{
	< PRIMARY > < KEY >
	     arr = columnNameList()
	{
	    arr.add(0,"0");
	    return arr;
	}
}

ArrayList<String> referentialConstraint(Table t) :
{
    ArrayList<String> arr1;
    ArrayList<String> arr2;
    Token tok;
    String tablename;
}
{
	< FOREIGN > < KEY >
		arr1 = columnNameList()
		< REFERENCES >
		tok = < LEGAL_IDENT >
		arr2 = columnNameList()
		{
		    tablename = tok.toString();
		    arr1.add(0,"1");
		    arr1.add(1, tablename);
		    arr1.add("2");
		    arr1.addAll(arr2);
		    return arr1;
		}
}

ArrayList<String> columnNameList() :
{
    ArrayList<String> arr = new ArrayList<String>();
    Token tok;
    String s;
}
{
	< LEFT_PAREN >
		tok = < LEGAL_IDENT >
		{
		    s = tok.toString();
		    arr.add(s);
		}
		(
		 < COMMA >
		 tok = < LEGAL_IDENT >
		 {
		    s = tok.toString();
		    arr.add(s);
		 }
		)*
	< RIGHT_PAREN >
	{
	    return arr;
	}
}

Type dataType() :
{
    Type t;
    Token tok;
    String intval;
}
{
	(< INT >
	{
	    t = new Type(TypeName.INT, -1);
	    return t;
	})
		| (
				< CHAR >
				< LEFT_PAREN >
				tok = < INT_VALUE >
				< RIGHT_PAREN >
				{
				    intval = tok.toString();
				    t = new Type(TypeName.CHAR, Integer.parseInt(intval));
				    return t;
				}
			)
		| (< DATE >
		{
		    t = new Type(TypeName.DATE, -1);
		    return t;
		})

}

/* drop table statement */
Message dropTableQuery() :
{
    Token tok;
	String tablename;
	Message m;
}
{
	< DROP > < TABLE >
		tok = < LEGAL_IDENT >
		< SEMICOLON >
		{
		    tablename = tok.toString();
			m = DBManager.getDBManager().dropTable(tablename);
			return m;
		}
}

/* desc statement */
Message descQuery() :
{
    Token tok;
	String tablename;
	Message m;
}
{
	< DESC >
		tok = < LEGAL_IDENT >
		< SEMICOLON >
		{
		    tablename = tok.toString();
		    m = Message.getDescTable();
		    m.setNameArg(tablename);
			return m;
		}
}

/* show tables statement */
Message showTablesQuery() :
{}
{
	< SHOW > < TABLES >
	< SEMICOLON >
	{
		return Message.getShowTables();
	}
}

/* select statement */
void selectQuery() :
{}
{
	< SELECT >
		selectList()
		tableExpression()
	< SEMICOLON >
}

void selectList() :
{}
{
	< ASTERISK >
		|   selectedColumn()
		( < COMMA > selectedColumn() )*
}

void selectedColumn() :
{}
{
	tableColumn()
		( < AS > < LEGAL_IDENT > )?
}

void tableExpression() :
{}
{
	fromClause()
		( whereClause() )?
}

void fromClause() :
{}
{
	< FROM > tableReferenceList()
}

void tableReferenceList() :
{}
{
	referredTable()
		( < COMMA > referredTable() )*
}

void referredTable() :
{}
{
	< LEGAL_IDENT >
		( < AS > < LEGAL_IDENT > )?
}

void whereClause() :
{}
{
	< WHERE > booleanValueExpression()
}

void booleanValueExpression() :
{}
{
	/* eliminate left recursion */
	booleanTerm() ( < OR > booleanTerm() )*
}

void booleanTerm() :
{}
{
	/* eliminate left recursion */
	booleanFactor() ( < AND > booleanFactor() )*
}

void booleanFactor() :
{}
{
	( < NOT > )?
		booleanTest()
}

void booleanTest() :
{}
{
	predicate()
		| parenthesizedBooleanExpression()
}

void parenthesizedBooleanExpression() :
{}
{
	< LEFT_PAREN > booleanValueExpression() < RIGHT_PAREN >
}

void predicate() :
{}
{
	/* revised to remove lookahead */
	identifierPredicate() | constantPredicate()
}

void identifierPredicate() :
{}
{
	tableColumn()
		( ( < COMP_OP > compOperand() )
			| nullOperation() ) 
}

void constantPredicate() :
{}
{
	comparableValue()
		< COMP_OP >
		compOperand()
}

void compOperand() :
{}
{
	comparableValue()
		| tableColumn()
}

Value comparableValue() :
{
    Token t;
    Integer i;
    String cd;
    Value v;
}
{
	((t = < INT_VALUE > { i = new Integer(Integer.parseInt(t.toString()));
	                     v = new Value(TypeName.INT);
	                     v.setIntVal(i); })
	|
	(t = < CHAR_STRING > { cd = t.toString();
	                       v = new Value(TypeName.CHAR);
	                       v.setStringVal(cd); })
	|
	(t = < DATE_VALUE > { cd = t.toString();
	                      v = new Value(TypeName.DATE);
	                      v.setDateVal(cd); }))
    { return v; }
}

void nullOperation() :
{}
{
	< IS > ( < NOT > )? < NULL >
}

/* insert statement */
Message insertQuery() :
{
    Token t;
    String tablename;
    Message m = null;
    Record rec = new Record();
}
{
	< INSERT > < INTO >
		t = < LEGAL_IDENT >
		{
		    tablename = t.toString();
		}
		m = insertColumnsAndSource(tablename, rec)
		< SEMICOLON >
		{
		    if (m == null) {
		        Berkeley.getBerkeley().insertRecord(tablename, rec);
		        m = Message.getInsertSuccess();
		    }
		    return m;
		}
}

Message insertColumnsAndSource(String tablename, Record rec) :
{
    Message m = null;
    ArrayList<String> arr = null;
}
{
	( arr = columnNameList() )?
		m = valueList(arr, tablename, rec)
		{
		    return m;
		}
}

Message valueList(ArrayList<String> arr, String tablename, Record rec) :
{
    Message m = null;
    ArrayList<Value> valArr = new ArrayList<Value>();
    Value v;
    boolean explicit = true;
    Table table;
}
{
    {
        table = DBManager.getDBManager().findTable(tablename);
        if (table == null)
            m = Message.getNoSuchTable();
        else if (arr != null)
            m = Record.verifyColumnList(arr, table);
    }
	< VALUES >
		< LEFT_PAREN >
		v = value()
		{
		    valArr.add(v);
		}
		( < COMMA > v = value()
		 {
		    valArr.add(v);
		 }
		 )*
		< RIGHT_PAREN >
		{
		    if (m == null) {
		        if (arr == null)
		            explicit = false;
                m = rec.addValues(explicit, valArr, table);
		    }
		    return m;
		}
}

Value value() :
{
    Value v;
}
{
	((< NULL >
	{
	   v = new Value();
	})
	|
	(v = comparableValue()))
	{
	    return v;
	}
}

/* delete statement */
void deleteQuery() :
{}
{
	< DELETE > < FROM > < LEGAL_IDENT >
		( whereClause() )?
	< SEMICOLON >
}

void tableColumn() :
{}
{
	< LEGAL_IDENT >
		( < PERIOD > < LEGAL_IDENT > )?
}
